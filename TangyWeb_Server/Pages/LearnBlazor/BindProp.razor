@page "/learnBlazor/bindProp"
<h2 class="text-success">Individual Product</h2>
<div class="row">
    <div class="col-6 border p-3">
        <h3 class="text-primary">Product Summary</h3>
        Name: @Product.Name
        <br />
        Active: @Product.IsActive
        <br />
        Price: @Product.Price
        <br />
        This Product is: @(Product.IsActive ? "Active" : "Not Active")
        <br />
        Property Selected: @selectedProp
        @if (!String.IsNullOrEmpty(selectedProp))
        {
            <p>Property Value: @Product.ProductProperties.FirstOrDefault(x => x.Key == selectedProp).Value</p>
        }
    </div>
    <br />
    <div class="col-6 border p-3">
        <h3 class="text-primary">Product Playground</h3>
        <div>
            Active:<input type="checkbox" @bind-value="@Product.IsActive" checked="@(Product.IsActive?"Checked":null)" />
        </div>
        <br />
        <div>
            Price:<input type="number" @bind-value="@Product.Price" @bind-value:event="oninput" />
        </div>
        <br />
        <div>
            Product Properties:
            <select @bind="selectedProp">
                @foreach (var prop in Product.ProductProperties)
                {
                    <option values="@prop.Key">@prop.Key</option>
                }
            </select>
        </div>
    </div>
</div>
<h2 class="text-success">Product Table</h2>
<div class="row">
    <div class="col-12 border p-3">
        <table class="table table-striped">
            <tbody>
                @foreach (var product in Products)
                {
                    <tr>
                        <td><input type="text" @bind-value="product.Name" @bind-value:event="oninput"/></td>
                        <td><input type="number" @bind-value="product.Price" @bind-value:event="oninput" /></td>
                        <td><input type="checkbox" @bind-value="product.IsActive" checked="@(product.IsActive?"Checked":null)" /></td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>

<br />
<br />
<h3>Product Summary</h3>
@foreach (var product in Products)
{
    <p>@product.Name [@product.Price] is @(product.IsActive ? "Active" : "Not Active")</p>
}
@*// This is one way binding.*@
@*Price: <input type="number" value="@Product.Price" />*@

@*2 way Binding occurs here, updated on eventchange, so the binding wont trigger until the user clicks away *@
@*Price: <input type="number" @bind-value="@Product.Price" />*@

@*This is 2 way binding with a different event to fire on change.*@

@*Price: <input type="number" @bind="@Product.Price" @bind:event="oninput" />*@



@code {
    private string selectedProp = "";

    Demo_Product Product = new()
        {
            Id = 1,
            Name = "Rose Candle",
            IsActive = true,
            Price = 10.99,
            ProductProperties = new List<Tangy_Models.LearnBlazorModels.Demo_ProductProp>()
            {
                new Demo_ProductProp{ Id=1, Key="Color", Value="Black"},
                new Demo_ProductProp{ Id=1, Key="Flavor", Value="Rose Jasmine"},
                new Demo_ProductProp{ Id=1, Key="Size", Value="20oz"},
            }
        };

    List<Demo_Product> Products = new();

    protected override void OnInitialized()
    {
        Products.Add(new()
            {
                Id = 1,
                Name = "Midnight Blaze",
                IsActive = false,
                Price = 20,
                ProductProperties = new()
            {
                new Demo_ProductProp { Id = 1, Key="Flavor", Value="Rose"},
                new Demo_ProductProp {Id = 2, Key="Size", Value="20oz"},
                new Demo_ProductProp {Id=3, Key="Color", Value="Purple"}
            }
            });

        Products.Add(new()
            {
                Id = 2,
                Name = "Blossom Lilly",
                IsActive = true,
                Price = 40,
                ProductProperties = new()
            {
                new Demo_ProductProp {Id =1, Key="Flavor", Value="Lily"},
                new Demo_ProductProp {Id =2, Key="Size", Value="18oz"},
                new Demo_ProductProp {Id =3, Key="Color", Value="White"}
            }
            });
    }


    private void ToggleActiveProduct()
    {
        if (Product.IsActive)
        {
            Product.IsActive = false;
        }
        if (!Product.IsActive)
        {
            Product.IsActive = true;
        }
        StateHasChanged();
    }
}
